// Generated by CoffeeScript 1.3.3
(function() {
  var XanderClient, getParameterByName, xander;

  getParameterByName = function(name) {
    var regex, regexS, results;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(window.location.search);
    if (results === null) {
      return "";
    }
    return decodeURIComponent(results[1].replace(/\+/g, " "));
  };

  XanderClient = (function() {
    var first_slot, slot_number;

    function XanderClient() {}

    first_slot = 1;

    slot_number = 1;

    XanderClient.prototype.showVariantBar = function() {
      var _this = this;
      console.log("Show variant bar");
      $('body').prepend("<div id='__variants' style='padding-left: 10%; width: 100%; background: black; color: white; border-bottom: 5px solid #CCC'>\n  <table id='__variantTable'></table>\n</div>");
      $("*[data-variant]").parent().each(function(i, x) {
        var options, variants;
        variants = $(x).find("> [data-variant]");
        options = "";
        variants.each(function(i, y) {
          return options += " <td><button onclick='xander.showVariant(\"" + (_this.titleFor(x)) + "\",\"" + ($(y).attr('data-variant')) + "\"); return false'>" + ($(y).attr('data-variant')) + "</button></td>";
        });
        console.log($(x).attr('id'));
        return $('#__variantTable').append("<tr><th>" + ($(x).attr('id')) + "</th>" + options + "</tr>");
      });
      return $("*[data-css-variants]").each(function(i, x) {
        var options, variants;
        variants = $(x).attr('data-css-variants').split(' ');
        options = "";
        console.log("2", variants);
        $(variants).each(function(i, y) {
          return options += " <td><button onclick='xander.showCssVariant(\"" + (_this.titleFor(x)) + "\",\"" + y + "\"); return false'>" + y + "</button></td>";
        });
        return $('#__variantTable').append("<tr><th>" + ($(x).attr('id')) + "</th>" + options + "</tr>");
      });
    };

    XanderClient.prototype.showVariant = function(name, subname) {
      var variant, variants;
      variants = $("#" + name);
      $(variants).find("> [data-variant]").hide();
      return variant = $(variants).find("> [data-variant='" + subname + "']").show();
    };

    XanderClient.prototype.showCssVariant = function(id, klass) {
      var el, variants;
      el = $("#" + id);
      variants = el.attr('data-css-variants').split(' ');
      $(variants).each(function(i, y) {
        return el.removeClass(y);
      });
      return el.addClass(klass);
    };

    XanderClient.prototype.chooseVariant = function() {
      var all_choices;
      all_choices = $("*[data-variant]").parent();
      all_choices.each(function(i, x) {
        var chosen, variants;
        variants = $(x).find("> [data-variant]");
        variants.hide();
        if (!$(x).attr('id')) {
          console.error("Could not find parent id for data-variant");
          console.error(x);
          return;
        }
        $(x).attr('data-variant-slot', slot_number);
        chosen = $(variants[parseInt(Math.random() * variants.length)]).show();
        $(x).attr('data-variant-chosen', chosen.attr('data-variant'));
        return slot_number += 1;
      });
      if (all_choices.length > 5) {
        return typeof console !== "undefined" && console !== null ? console.log("You have too many variants to track with Google Analytics!  Google Analytics limits the number of custom variable slots to 5.") : void 0;
      }
    };

    XanderClient.prototype.chooseCssVariant = function() {
      var all_choices;
      all_choices = $("[data-css-variants]");
      return all_choices.each(function(i, x) {
        var option, options;
        if (!$(x).attr('id')) {
          console.error("data-css-variants element is missing id");
          console.error(x);
          return;
        }
        options = $(x).attr('data-css-variants').split(' ');
        option = options[parseInt(Math.random() * options.length)];
        $(options).each(function(j, k) {
          return $(x).removeClass(k);
        });
        $(x).addClass(option);
        $(x).show().attr('data-variant-slot', slot_number);
        $(x).show().attr('data-variant-chosen', option);
        return slot_number += 1;
      });
    };

    XanderClient.prototype.wireGoals = function() {
      return $("*[data-goal]").each(function(i, x) {
        var goal;
        x = $(x);
        goal = x.attr('data-goal');
        if (x.is("a") || (x.is("input") && x.attr('type') === 'submit')) {
          return x.click(function() {
            return xander.goalReached(goal);
          });
        } else if (x.is("form")) {
          return x.submit(function() {
            return xander.goalReached(goal);
          });
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.error("[Xander] Error: no idea what to do with the goal defined on this element:", x);
          }
          return typeof console !== "undefined" && console !== null ? console.error("Supported types are a tags, submit inputs, forms.  Please check http://xander.io for more information") : void 0;
        }
      });
    };

    XanderClient.prototype.apiKeyPath = function(key) {
      return "http://variants.xander.io/" + key + "/" + (encodeURIComponent(window.location.host + window.location.pathname)) + "/chosen.js";
    };

    XanderClient.prototype.apiKey = function(key) {
      return $("head").append("<script src='" + (this.apiKeyPath(key)) + "'></script>");
    };

    XanderClient.prototype.goalReached = function(goal) {
      var i;
      _gaq.push(['_trackPageview', goal]);
      if (this.trackingDisabled) {
        return false;
      }
      i = new Image();
      i.src = this.trackingPixelGoalPath(goal);
      return true;
    };

    XanderClient.prototype.titleFor = function(e) {
      var id;
      id = $(e).attr('id');
      if (id) {
        return "Slot #" + slot_number;
      }
      return id;
    };

    XanderClient.prototype.callAnalytics = function() {
      return $("*[data-variant-slot]").each(function(i, x) {
        var chosen, title;
        chosen = $(x).attr('data-variant-chosen');
        slot_number = $(x).attr('data-variant-slot');
        title = titleFor(x);
        return _gaq.push(['_setCustomVar', parseInt(slot_number), title, chosen, 2]);
      });
    };

    XanderClient.prototype.reroll = function($target) {
      var $chosen, chosen, i, variant, variants, _i, _j, _len, _len1, _ref;
      if ($target) {
        chosen = $target.attr("data-variant-chosen");
        variants = $target.find("> [data-variant]");
        if (variants.length > 1) {
          variants.hide();
          for (i = _i = 0, _len = variants.length; _i < _len; i = ++_i) {
            variant = variants[i];
            if ($(variant).attr('data-variant') === chosen) {
              variants.splice(i, 1);
              break;
            }
          }
          $chosen = $(variants[parseInt(Math.random() * variants.length)]).show();
          return $target.attr('data-variant-chosen', $chosen.attr('data-variant'));
        } else {
          variants = (_ref = $target.attr("data-css-variants")) != null ? _ref.split(' ') : void 0;
          if ((variants != null ? variants.length : void 0) > 1) {
            for (i = _j = 0, _len1 = variants.length; _j < _len1; i = ++_j) {
              variant = variants[i];
              if ($target.hasClass(variant)) {
                variants.splice(i, 1);
                $target.removeClass(variant);
                break;
              }
            }
            chosen = variants[parseInt(Math.random() * variants.length)];
            $target.addClass(chosen);
            return $target.attr('data-variant-chosen', chosen);
          }
        }
      } else {
        this.chooseVariant();
        return this.chooseCssVariant();
      }
    };

    XanderClient.prototype.variant = function() {
      var results;
      results = {};
      $("*[data-variant-slot]").each(function(i, x) {
        var chosen, title;
        chosen = $(x).attr('data-variant-chosen');
        title = $(x).attr('id' || ("slot_" + slot_number));
        return results[title] = chosen;
      });
      return results;
    };

    XanderClient.prototype.allVariants = function() {
      var result;
      result = {};
      $("*[data-variant-chosen]").each(function(i, x) {
        var $x, id;
        $x = $(x);
        id = $x.attr('id');
        result[id] = [];
        if ($x.attr("data-css-variants")) {
          return result[id] = $x.attr('data-css-variants').split(' ');
        } else {
          return $x.find("[data-variant]").each(function(j, y) {
            return result[id].push($(y).attr("data-variant"));
          });
        }
      });
      return result;
    };

    XanderClient.prototype.goals = function() {
      return $.map($("*[data-goal]"), function(x) {
        return $(x).attr("data-goal");
      });
    };

    XanderClient.prototype.disableTrackingPixel = function() {
      return this.trackingDisabled = true;
    };

    XanderClient.prototype.addTrackingPixel = function() {
      var i;
      if (this.trackingDisabled) {
        return false;
      }
      i = new Image();
      i.src = this.trackingPixelPath();
      return true;
    };

    XanderClient.prototype.uuid = function() {
      var _this = this;
      if (this.uid) {
        return this.uid;
      }
      this.uid = localStorage.getItem('uuid');
      if (this.uid) {
        return this.uid;
      }
      this.uid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
      localStorage.setItem('uuid', this.uid);
      return this.uid;
    };

    XanderClient.prototype.trackingPixelPath = function() {
      var url;
      url = "http://track.xander.io/impression.gif?";
      url += "url=" + (encodeURIComponent(window.location.host + window.location.pathname));
      url += "&chosen=" + (encodeURIComponent(JSON.stringify(this.variant())));
      url += "&all=" + (encodeURIComponent(JSON.stringify(this.allVariants())));
      url += "&goals=" + (encodeURIComponent(JSON.stringify(this.goals())));
      url += "&user=" + (encodeURIComponent(this.uuid()));
      return url;
    };

    XanderClient.prototype.trackingPixelGoalPath = function(goal) {
      var url;
      url = "http://track.xander.io/goal.gif?";
      url += "url=" + (encodeURIComponent(window.location.host + window.location.pathname));
      url += "&user=" + (encodeURIComponent(this.uuid()));
      url += "&goal=" + (encodeURIComponent(goal));
      url += "&chosen=" + (encodeURIComponent(JSON.stringify(this.variant())));
      return url;
    };

    return XanderClient;

  })();

  xander = new XanderClient();

  $(function() {
    if (getParameterByName('showVariants') === 'true') {
      xander.showVariantBar();
    }
    xander.slot_number = xander.first_slot;
    xander.chooseVariant();
    xander.chooseCssVariant();
    xander.wireGoals();
    if (getParameterByName('showVariants') !== 'true') {
      xander.callAnalytics();
    }
    return xander.addTrackingPixel();
  });

  window.xander = xander;

}).call(this);
